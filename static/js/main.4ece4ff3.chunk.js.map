{"version":3,"sources":["Component/Filter/Filter.module.css","Component/ContactItem/ContactItem.js","Component/ContactList/ContactList.js","Component/ContactForm/ContactForm.js","Component/Filter/Filter.js","App.js","reportWebVitals.js","index.js","Component/ContactItem/ContactItem.module.css","Component/ContactForm/ContactForm.module.css"],"names":["module","exports","ContactItem","name","number","onDeleteNumber","className","css","item","type","button","onClick","ContactList","contacts","onDeleteContact","map","contact","id","ContactForm","filterContact","onAddContact","useState","setName","setNumber","inputNameId","shortid","generate","inputTelId","findCurrentValue","e","target","value","onSubmit","preventDefault","find","toLowerCase","alert","wrap","htmlFor","input","onChange","pattern","title","required","Filter","filter","onFilter","inputFilterId","App","JSON","parse","localStorage","getItem","setContacts","setFilter","useEffect","setItem","stringify","normalizeFilter","filterCurrentTel","includes","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4ece4ff3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__dI6dE\"};","import PropTypes from \"prop-types\";\r\nimport css from \"./ContactItem.module.css\";\r\n\r\nexport default function ContactItem({ name, number, onDeleteNumber }) {\r\n  return (\r\n    <li className={css.item}>\r\n      <span className={css.name}>{`${name}:`}</span>\r\n      <span className={css.number}>{number}</span>\r\n      <button\r\n        type=\"submit\"\r\n        className={css.button}\r\n        onClick={() => onDeleteNumber(name)}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n}\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  onDeleteNumber: PropTypes.func,\r\n};","import PropTypes from \"prop-types\";\r\nimport { Fragment } from \"react\";\r\nimport ContactItem from \"../ContactItem/ContactItem\";\r\n\r\nexport default function ContactList({ contacts, onDeleteContact }) {\r\n  return (\r\n    <ul>\r\n      {contacts.map((contact) => {\r\n        return (\r\n          <Fragment key={contact.id}>\r\n            <ContactItem\r\n              name={contact.name}\r\n              number={contact.number}\r\n              onDeleteNumber={onDeleteContact}\r\n            />\r\n          </Fragment>\r\n        );\r\n      })}\r\n    </ul>\r\n  );\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array,\r\n  onDeleteContact: PropTypes.func,\r\n};","import { useState } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport css from \"./ContactForm.module.css\";\r\n\r\nexport default function ContactForm({ filterContact, onAddContact }) {\r\n  const [name, setName] = useState(\"\");\r\n  const [number, setNumber] = useState(\"\");\r\n\r\n  const inputNameId = shortid.generate();\r\n  const inputTelId = shortid.generate();\r\n\r\n  const findCurrentValue = (e) => {\r\n    switch (e.target.name) {\r\n      case \"name\":\r\n        setName(e.target.value);\r\n        break;\r\n\r\n      case \"number\":\r\n        setNumber(e.target.value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const addContact = (e) => {\r\n    e.preventDefault();\r\n\r\n    filterContact.find(\r\n      (contact) => contact.name.toLowerCase() === name.toLowerCase()\r\n    )\r\n      ? alert(`${name} is already in contacts`)\r\n      : onAddContact(name, number);\r\n\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={addContact} className={css.wrap}>\r\n      <label htmlFor={inputNameId}>\r\n        Name\r\n        <input\r\n          className={css.input}\r\n          onChange={findCurrentValue}\r\n          value={name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          id={inputNameId}\r\n        />\r\n      </label>\r\n      <label htmlFor={inputTelId}>\r\n        Number\r\n        <input\r\n          className={css.input}\r\n          onChange={findCurrentValue}\r\n          value={number}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          id={inputTelId}\r\n        />\r\n      </label>\r\n      <button type=\"submit\" className={css.button}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nContactForm.propTypes = {\r\n  filterContact: PropTypes.array,\r\n  onAdd: PropTypes.func,\r\n};","import shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport css from \"./Filter.module.css\";\r\n\r\nexport default function Filter({ filter, onFilter }) {\r\n  const inputFilterId = shortid.generate();\r\n\r\n  return (\r\n    <label htmlFor={inputFilterId}>\r\n      Find contacts by name\r\n      <input\r\n        className={css.input}\r\n        onChange={onFilter}\r\n        type=\"text\"\r\n        value={filter}\r\n        id={inputFilterId}\r\n      />\r\n    </label>\r\n  );\r\n}\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  onFilter: PropTypes.func,\r\n};","import { useState, useEffect } from \"react\";\nimport shortid from \"shortid\";\nimport ContactList from \"./Component/ContactList/ContactList\";\nimport ContactForm from \"./Component/ContactForm/ContactForm\";\nimport Filter from \"./Component/Filter/Filter\";\nimport \"./App.css\";\n\nexport default function App() {\n  const [contacts, setContacts] = useState(\n    JSON.parse(localStorage.getItem(\"contacts\"))\n  );\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const normalizeFilter = filter.toLowerCase();\n  const filterCurrentTel = contacts.filter((contact) =>\n    contact.name.toLowerCase().includes(normalizeFilter)\n  );\n\n  const addNewContact = (name, number) => {\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n    setContacts([contact, ...contacts]);\n  };\n\n  const findFilterValue = (e) => {\n    setFilter(e.target.value);\n  };\n\n  const removeContact = (name) => {\n    setContacts(contacts.filter((prevState) => prevState.name !== name));\n  };\n\n  return (\n    <div className=\"wrap\">\n      <h1 className=\"title\">Phonebook</h1>\n      <ContactForm\n        filterContact={filterCurrentTel}\n        onAddContact={addNewContact}\n      />\n      <h2 className=\"title\">Contacts</h2>\n      <Filter filter={filter} onFilter={findFilterValue} />\n      <ContactList\n        contacts={filterCurrentTel}\n        onDeleteContact={removeContact}\n      />\n    </div>\n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactItem_item__2icFl\",\"name\":\"ContactItem_name__1Kreg\",\"button\":\"ContactItem_button__1C59d\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"ContactForm_wrap__HruuK\",\"input\":\"ContactForm_input__3yJ11\",\"button\":\"ContactForm_button__2t90c\"};"],"sourceRoot":""}